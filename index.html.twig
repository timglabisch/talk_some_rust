<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>reveal.js</title>

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/simple.css">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="lib/css/idea.css">

		<script src="jquery-3.0.0.min.js"></script>

		<style>
			iframe {
				max-width: 100% !important;
			}

			pre {
				box-shadow: none !important;
			}

			.right-code {
				border-left: 1px solid silver !important;
			}

			section img {
				border: 1px solid #ccc !important;
			}
		</style>
		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>
		<script type="application/javascript">
            $(document).ready(function() {
                $('.editor').each(function (i, v) {

                    $(v).css({
                        'height': $(document).height() - 100,
                        'border': '1px solid silver',
                        'display': 'flex',
                        'justify-content': 'flex-start'
                    });

                    var rust_pen = "http://127.0.0.1:5000";
                    //var rust_pen = "https://play.rust-lang.org/";

                    var rust_code = $(v).data('code-rust');


                    var php_code = $(v).data('code-php');


                    $(v).html('');

                    $(v).append($('<iframe style="flex: 1 1 auto;overflow:scroll"/>').attr('src', rust_pen + '/?pageMode=presentation&code=' + encodeURI(rust_code)));


                    if (!php_code.trim()) {
                        return;
                    }

                    var php_code_node = $('<div class="right-code"><pre><code data-trim data-noescape class="code"></code></pre></div>');
                    php_code_node.find('.code').text(php_code);
                    $(v).append($('<div style="flex: 1 1 auto;overflow:scroll"/>').html(php_code_node));

                });

                $('.editor > *').each(function(i, v) {
                    //$(v).css('margin', '10px');
                }).mouseenter(function(e) {
                    $(e.target).css('flex', '95 1 auto');
                    $(e.target).siblings().css('width', 100);
                    $(e.target).siblings().css('flex', '1 1 auto');
                })
                    .mouseleave(function(e) {
                        $(e.target).css('flex', '1 1 auto');
                        $(e.target).css('width', '');
                        $(e.target).siblings().css('width', '');
                    });
            });


		</script>
	</head>
	<body>
		<div class="reveal">
			<div class="slides">
				<section>
                    {% embed "twig/editor.html.twig" %}
                        {% block rust %}
pub fn main() {
	println!();
}
                        {% endblock %}

                        {% block php %}
<?php

echo "foo";
                        {% endblock %}
                    {% endembed %}

				</section>

					<section>
						<img src="img/me.jpeg" style="max-width:200px"><br/>
						<i>@timglabisch</i>
						<br/>
						<img src="img/github_stats.png" style="max-width:370px"/>
						<aside class="notes">
							<ul>
								<li>Ich bin Tim</li>
								<li>Wer schonmal hier aus der UG war und nicht über mich hinweg gesehen hat, hat mich bestimmt schonmal gesehen</li>
								<li>
									... Und Github denkt ich würde in diesen Sprachen entwickeln
									<ul>
										<li>Das ist definitiv falsch, ich mach kein Basic x)</li>
										<li>und CSS ist dieser Talk ^^</li>
										<li>gibt aber vielleicht ein ganz guten Überblick über meinen "sprachlichen" Background</li>
									</ul>
								</li>
								<li>
									Ich arbeite hier für Sensiolabs als Architekt, habe demnach einen starken PHP und Symfony Background
								</li>

								<li>
									Der Titel des Talks war ja Rust für PHP Devs
									<ul>
										<li>In diesem Sinne hab ich heute viel Code mitgebracht</li>
										<li>Ich hab aber auch viele Slides mitgebracht</li>
										<li>Sollte ich euch deutlich zu schnell werden, einfach aufschreien oder mit irgendwas nach mir werfen.</li>
										<li>
											Die Slides stelle ich online
											<ul>
												<li>Wenn man den Talk gewissenhaft nacharbeitet, kann man einige Stunden damit verbringen</li>
												<li>... und das ist gewollt so...</li>
											</ul>
										</li>
									</ul>
								</li>
							</ul>
						</aside>
					</section>

					<section>
                        {% embed "twig/editor.html.twig" %}
                        {% block rust %}
fn main() {
	println!("hello, Rheinjug!");
}
                        {% endblock %}

                        {% block php %}
// kotlin

fun main(args: Array<String>) {
	System.out.println("hello Rheinjug!");
}

// php
echo "Hello Rheinjug!";
						{% endblock %}
					{% endembed %}

					</section>
					<section>
                        {% embed "twig/editor.html.twig" %}
                        {% block rust %}
fn main() {
	let a: &[u8] = b"hello, Rheinjug!";
	println!("{}", ::std::str::from_utf8(a).expect("i am sure it's valid utf8"));
}
                        {% endblock %}

                        {% block php %}
// kotlin
import java.nio.charset.Charset

fun main(args: Array<String>) {
	val a = "Hello Rheinjug".toByteArray(Charset.defaultCharset());
	System.out.println(String.format("%s", a.toString(Charset.defaultCharset())));
}

// php
echo(sprintf("%s", "Hello Rheinjug!"));

                        {% endblock %}
                    {% endembed %}

						<aside class="notes">
							<ul>
								<li>nimmt man 3 sprachen, so hat man 3 unterschiedliche implementierungen was strings angeht.</li>
								<li>in rust gibt es 4 string typen, klassische sind strings immer utf8 und mutable</li>
								<li>strings in kotlin sind nicht mutable und nutzen wie java utf-16,  das default defaultCharset ist allerdings utf8. es gibt im issue tracker eine diskussion auf utf-8 zu wechseln.</li>
								<li>strings in php sind byte sequenzen. php6 ist dran gecheitert.</li>
								<li>
									wenn ihr bei php genau guckt, mal hab ich das echo mit klammern geschrieben, mal ohne.
									das ist eine besonderhet in php, echo ist ein eigener opcode.
									schaut man auf die rust implementierung siehst man das ausrufezeichen. Dabei handelt es sich nicht um ein sprachkonstrukt, sondern um ein macro.
								</li>
							</ul>
						</aside>
				</section>

				<section>
					{% embed "twig/editor.html.twig" %}
					{% block rust %}
pub fn greet(name : String) {
	println!("Hello {}", name);
}

pub fn main() {
	let name = "Rheinjug".to_string();
	greet(name);
}
					{% endblock %}

					{% block php %}
// kotlin
private fun greet(name : String) {
	System.out.println("Hello " + name);
}

fun main(args: Array<String>) {
	val name = "Rheinjug";
	greet(name)
}

// php
function greet(string $name) {
	echo sprintf(
		"Hello %s", $name
	);
}

$name = "PHPUG";
greet($name);



					{% endblock %}
					{% endembed %}

						<aside class="notes">
							<ul>
								<li>Hier sehen wir eine Funktion welche aufgerufen wird (greet)</li>
								<li>Typisierung der Funktion (String) ist steht auf der rechten seite Kotlin und Rust machen dies identisch. Java und PHP nicht.</li>
								<li>ich werde für den Moment noch nicht auf das .to_string() eingehen, vielleicht schaffen wir das gleich noch</li>
							</ul>
						</aside>
				</section>

				<section>
					{% embed "twig/editor.html.twig" %}
					{% block rust %}
struct Person {
	pub age: i32
}

pub fn main() {
	let tim = Person { age: 25 };
	println!("tim is {} years old", tim.age);
}
					{% endblock %}

					{% block php %}
class Person(val age : Int);

fun main(args: Array<String>) {
	val tim = Person(25);
	System.out.println("tim is " + tim.age + " years old")
}

					{% endblock %}
					{% endembed %}

					<aside class="notes">
						<ul>
							<li>In Rust definieren wir ein Strukt mit einer Property. in Kotlin eine Klasse.</li>
							<li>Strukts haben felder, Klassen haben properties</li>
							<li>
								Jede sprache hat eine andere ideologie. Sieht man z.b. daran:
								Kotlin ist public by default, Rust ist private by default.
								<ul>
									<li>Kotlin ist eher pragmatisch</li>
									<li>Rust versucht extrem korrekt und expliizit zu ein. werden wir noch öfters sehen.</li>
									<li>anderes beispiel, wir hatten eben da expect beim wandeln in utf8.</li>
								</ul>
							</li>
						</ul>
					</aside>
				</section>

				<section>
					{% embed "twig/editor.html.twig" %}
					{% block rust %}
struct Person {
	age: i32
}

impl Person {
	pub fn new(age: i32) -> Self {
		Person {
			age
		}
	}

	pub fn get_age(&self) -> i32 {
		self.age
	}
}

pub fn main() {
	let tim = Person::new(25);
	println!("tim is {} years old", tim.get_age());
}
					{% endblock %}

					{% block php %}
class Person(private val age : Int) {
	fun getAge(): Int {
		return this.age;
	}
}

fun main(args: Array<String>) {
	val tim = Person(25);
	System.out.println("tim is " + tim.getAge() + " years old")
}


					{% endblock %}
					{% endembed %}

						<aside class="notes">
							<ul>
								<li>hier das gleiche beipiel mit einem getter.</li>
								<li>
                                    hier sieht man deutliche unterschiede
                                    <ul>
                                        <li>Kotlin code ist weniger</li>
                                        <li>Rust kennt keinen Konstruktur, ist einfach eine statische methode, welche eine Instanz zurückgibt.</li>
										<li>Rust hat keine echten klassen, sieht mehr aus wie golang (impl für ein strukt)</li>
										<li>Rust trennt zustand (properties) von Funktionen.</li>
										<li>
											Rust nimmt speichermanagement extrem genau, sehen wir später noch.
											<ul>
												<li>
													in kotlin -> Person ist eine Instanz einer Klasse welche im Heap liegt.
												</li>
												<li>
													In Rust ist Person eine Datenstruktur der Größe Integer, welche auf dem Stack liegt. Kein Refcounting etc. Wer weiß, was refcounting ist? später mehr dazu.
												</li>
											</ul>
										</li>
                                    </ul>
                                </li>
							</ul>
						</aside>
				</section>

				<section>
					<img src="img/more_than_a_hype.jpg" />
					<aside class="notes">
						<ul>

							<li>wenn man sich in projekten anguckt fühlt man sich mitlerweilse oft so.</li>
							<li>unsere technologielandschaft ähnelt in vielen Projekten oft eher einem Abenteuerspielplatz als einem enterprise projekt</li>

							<!--
							<li>
								da ganze hat 2 seiten
								<ul>
									<li>wir lernen grade software so zu implementieren, dass diese komponenten isoliert und wegwerfbar sind.</li>
									<li>software ist heute mehr wie eine PET-Flasche, man nuckelt dran und wirft ie weg.</li>
									<li>recruiting spielt da auch mit rein, viele wollen schlicht ausprobieren können.</li>
									<li>probiert man nicht aus, sammelt man keine erfahrung</li>
									<li>kunst liegt darin, gefahrlos auszuprobieren</li>
								</ul>
								<ul>
									<li></li>
								</ul>
							</li>
							-->

							<li>agile herangehensweisen machen es einfach mal was neues in ein projekt zu werfen, hype driven development ist gang und gebe</li>
							<li>die meisten entwickler haben mehr ajvascript frameworks selbst gebau, als das sie algorithmen implementieren können - so ist das eben heute, und ich finds auch nicht schlimm.</li>
							<li>in den letzten paar jahren ist die menge an technologien pro projekt extrem gestiegen, frameworks werden komplexer u.s.w.</li>
							<li>... und nun stelle ich euch mal wieder eine neue technologie vor, welche neue Hoffnung bringen soll. wie jede andere technologie mit der man sich rumschlägt.</li>

							<li>in dem talk möchte ich euch näher bringen, warum ich der meinung bin, dass rust nicht in dieses pattern fällt.</li>
							<li>-> schauen wir uns dazu mal die rust startseite an.</li>
						</ul>
					</aside>
				</section>

				<section>
					<img src="img/rust_lang_org_startpage1.png" />
					<aside class="notes">
						<aside class="notes">
							<ul>
								<li>Da schon wieder der Begriff system programming</li>
								<li>ist das kotlin auch? wohl eher web programming, mhhmm</li>
								<li>und rust will "schnell" sein</li>
								<li>ok, nichts neues, das sind C und C++ z.b. auch. und schnell ist ja eh relativ</li>
							</ul>
						</aside>
					</aside>
				</section>
					
				<section>
					<img src="img/system_prgramming_languages.png">
					<a href="https://en.wikipedia.org/wiki/System_programming_language">wikipedia.org/wiki/System_programming_language</a>
					<aside class="notes">
						<ul>
							<li>wikipedia listet 15 system programming languages</li>
							<li>das sind echt wenig sprachen, oder? wenn man mal danach schau, in welchen sprachen tatsächlich betriebsysteme / treiber geschrieben werden, wird die liste kürzer.</li>
							<li>ich bin ehrlich gesagt über swift gestolpert, weil es für mich keine wirkliche system programming language ist.</li>
						</ul>
					</aside>
				</section>

				<section>
					<img src="img/swift_system_programming.png">
					<a href="https://www.quora.com/Is-Swift-a-great-systems-programming-language">quora.com/Is-Swift-a-great-systems-programming-language</a>
				</section>

				<section>
					<img src="img/language_ranking.png">
					<img src="img/language_ranking_tiobe.png">
					<aside>
						schaut man mal welche sprachen tatsächlich viel genutzt werden.
						das ist krass, C und C++ sidn uralt und unter den ersten Plätzen.

					</aside>
				</section>


				<section>
					<aside>
						<ul>
							D auf rang 31
							C auf rang 2
							C++ auf rang 3
							Ada auf rang 24
						</ul>
					</aside>
				</section>


				<section>
					<img src="img/rust_lang_org_startpage2.png">
					<aside>
						<ul>
							<li>prevents segfaults - kennt jemand segfaults?</li>
							<li>
								ich programmiere viel php, da sieht man schonmal häufig segfaults. php ist in C geschrieben.
								<ul>
									<li>PHP Intern sind und kein spass zum Debuggen machen</li>
									<li>hab ich häufiger mal wenn ich gewaltige tests suits laufen lasse</li>
									<li>
										Wäre PHP also in Rust geschrieben, dann könnte es diese art von Fehlern nicht geben?
										<ul>
											<li>Krass</li>
											<li>Absolutes alleinstellungsmerkmal unter "System programming" sprachen.</li>
										</ul>
									</li>
								</ul>
							</li>
							<li>
								thread safety ist auch so ne sache
								<ul>
									<li>Threading ist hart</li>
									<li>Rust ist die erste sprache, welche thread safety erzwingen kann</li>
								</ul>
							</li>
							<li>
								Wie macht rust das alles?
								<ul>
									<li>Es kompilliert schlicht nicht, wenn es sich nicht sicher ist.</li>
								</ul>
							</li>
						</ul>
					</aside>
				</section>

				<section>
					<img src="img/me.jpeg" style="max-width:200px"><br/>
					<i>@timglabisch</i>
					<br/>
					<img src="img/github_stats.png" style="max-width:370px"/>
					<aside class="notes">
						<ul>
							<li>Ich bin Tim</li>
						</ul>
					</aside>
				</section>
			</div>
		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>
			// More info about config & dependencies:
			// - https://github.com/hakimel/reveal.js#configuration
			// - https://github.com/hakimel/reveal.js#dependencies
			Reveal.initialize({
                width: "100%",
                height: "100%",
                margin: 0,
                minScale: 1,
                maxScale: 1,
                history: true,
				dependencies: [
					{ src: 'plugin/markdown/marked.js' },
					{ src: 'plugin/markdown/markdown.js' },
					{ src: 'plugin/notes/notes.js', async: true },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
				]
			});
		</script>
	</body>
</html>
